"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import authzed.api.v0.core_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class WatchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAMESPACES_FIELD_NUMBER: builtins.int
    START_REVISION_FIELD_NUMBER: builtins.int
    @property
    def namespaces(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A watch request specifies one or more namespaces and a zookie
        representing the time to start watching.
        """
    @property
    def start_revision(self) -> authzed.api.v0.core_pb2.Zookie: ...
    def __init__(
        self,
        *,
        namespaces: collections.abc.Iterable[builtins.str] | None = ...,
        start_revision: authzed.api.v0.core_pb2.Zookie | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["start_revision", b"start_revision"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["namespaces", b"namespaces", "start_revision", b"start_revision"]) -> None: ...

global___WatchRequest = WatchRequest

class WatchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UPDATES_FIELD_NUMBER: builtins.int
    END_REVISION_FIELD_NUMBER: builtins.int
    @property
    def updates(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[authzed.api.v0.core_pb2.RelationTupleUpdate]:
        """A watch response contains all tuple modification events in ascending
        timestamp order, from the requested start timestamp to a timestamp
        encoded in a heartbeat zookie included in the watch response. The client
        can use the heartbeat zookie to resume watching where the previous watch
        response left off.
        """
    @property
    def end_revision(self) -> authzed.api.v0.core_pb2.Zookie: ...
    def __init__(
        self,
        *,
        updates: collections.abc.Iterable[authzed.api.v0.core_pb2.RelationTupleUpdate] | None = ...,
        end_revision: authzed.api.v0.core_pb2.Zookie | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end_revision", b"end_revision"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end_revision", b"end_revision", "updates", b"updates"]) -> None: ...

global___WatchResponse = WatchResponse
