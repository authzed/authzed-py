"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import authzed.api.v1.experimental_service_pb2
import collections.abc
import grpc

class ExperimentalServiceStub:
    """ExperimentalService exposes a number of APIs that are currently being
    prototyped and tested for future inclusion in the stable API.
    """

    def __init__(self, channel: grpc.Channel) -> None: ...
    BulkImportRelationships: grpc.StreamUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse,
    ]
    """BulkImportRelationships is a faster path to writing a large number of
    relationships at once. It is both batched and streaming. For maximum
    performance, the caller should attempt to write relationships in as close
    to relationship sort order as possible: (resource.object_type,
    resource.object_id, relation, subject.object.object_type,
    subject.object.object_id, subject.optional_relation)

    EXPERIMENTAL
    https://github.com/authzed/spicedb/issues/1303
    """
    BulkExportRelationships: grpc.UnaryStreamMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse,
    ]
    """BulkExportRelationships is the fastest path available to exporting
    relationships from the server. It is resumable, and will return results
    in an order determined by the server.
    """
    StreamingBulkCheckPermission: grpc.UnaryStreamMultiCallable[
        authzed.api.v1.experimental_service_pb2.StreamingBulkCheckPermissionRequest,
        authzed.api.v1.experimental_service_pb2.StreamingBulkCheckPermissionResponse,
    ]
    BulkCheckPermission: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionRequest,
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse,
    ]

class ExperimentalServiceServicer(metaclass=abc.ABCMeta):
    """ExperimentalService exposes a number of APIs that are currently being
    prototyped and tested for future inclusion in the stable API.
    """

    @abc.abstractmethod
    def BulkImportRelationships(
        self,
        request_iterator: collections.abc.Iterator[authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsRequest],
        context: grpc.ServicerContext,
    ) -> authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse:
        """BulkImportRelationships is a faster path to writing a large number of
        relationships at once. It is both batched and streaming. For maximum
        performance, the caller should attempt to write relationships in as close
        to relationship sort order as possible: (resource.object_type,
        resource.object_id, relation, subject.object.object_type,
        subject.object.object_id, subject.optional_relation)

        EXPERIMENTAL
        https://github.com/authzed/spicedb/issues/1303
        """
    @abc.abstractmethod
    def BulkExportRelationships(
        self,
        request: authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse]:
        """BulkExportRelationships is the fastest path available to exporting
        relationships from the server. It is resumable, and will return results
        in an order determined by the server.
        """
    @abc.abstractmethod
    def StreamingBulkCheckPermission(
        self,
        request: authzed.api.v1.experimental_service_pb2.StreamingBulkCheckPermissionRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[authzed.api.v1.experimental_service_pb2.StreamingBulkCheckPermissionResponse]: ...
    @abc.abstractmethod
    def BulkCheckPermission(
        self,
        request: authzed.api.v1.experimental_service_pb2.BulkCheckPermissionRequest,
        context: grpc.ServicerContext,
    ) -> authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse: ...

def add_ExperimentalServiceServicer_to_server(servicer: ExperimentalServiceServicer, server: grpc.Server) -> None: ...
