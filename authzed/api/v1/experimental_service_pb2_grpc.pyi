"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import authzed.api.v1.experimental_service_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ExperimentalServiceStub:
    """ExperimentalService exposes a number of APIs that are currently being
    prototyped and tested for future inclusion in the stable API.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    BulkImportRelationships: grpc.StreamUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse,
    ]
    """BulkImportRelationships is a faster path to writing a large number of
    relationships at once. It is both batched and streaming. For maximum
    performance, the caller should attempt to write relationships in as close
    to relationship sort order as possible: (resource.object_type,
    resource.object_id, relation, subject.object.object_type,
    subject.object.object_id, subject.optional_relation)

    EXPERIMENTAL
    https://github.com/authzed/spicedb/issues/1303
    """

    BulkExportRelationships: grpc.UnaryStreamMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse,
    ]
    """BulkExportRelationships is the fastest path available to exporting
    relationships from the server. It is resumable, and will return results
    in an order determined by the server.
    """

    BulkCheckPermission: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionRequest,
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse,
    ]
    """NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
    API will be removed from experimental in a future release.
    """

    ExperimentalReflectSchema: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaResponse,
    ]
    """EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
    SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
    """

    ExperimentalComputablePermissions: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsResponse,
    ]
    """EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
    permissions that compute based off a relation. For example, if a schema has a relation
    `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
    computable permissions for the relation `viewer` will include `view`.
    """

    ExperimentalDependentRelations: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsResponse,
    ]
    """EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
    relations and permissions that used to compute a permission, recursively. It is the
    inverse of the ComputablePermissions API.
    """

    ExperimentalDiffSchema: grpc.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaResponse,
    ]
    """EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
    specified schema and the schema stored in SpiceDB. This is useful for clients that need to
    introspect the schema of a SpiceDB instance.
    """

class ExperimentalServiceAsyncStub:
    """ExperimentalService exposes a number of APIs that are currently being
    prototyped and tested for future inclusion in the stable API.
    """

    BulkImportRelationships: grpc.aio.StreamUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse,
    ]
    """BulkImportRelationships is a faster path to writing a large number of
    relationships at once. It is both batched and streaming. For maximum
    performance, the caller should attempt to write relationships in as close
    to relationship sort order as possible: (resource.object_type,
    resource.object_id, relation, subject.object.object_type,
    subject.object.object_id, subject.optional_relation)

    EXPERIMENTAL
    https://github.com/authzed/spicedb/issues/1303
    """

    BulkExportRelationships: grpc.aio.UnaryStreamMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsRequest,
        authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse,
    ]
    """BulkExportRelationships is the fastest path available to exporting
    relationships from the server. It is resumable, and will return results
    in an order determined by the server.
    """

    BulkCheckPermission: grpc.aio.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionRequest,
        authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse,
    ]
    """NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
    API will be removed from experimental in a future release.
    """

    ExperimentalReflectSchema: grpc.aio.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaResponse,
    ]
    """EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
    SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
    """

    ExperimentalComputablePermissions: grpc.aio.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsResponse,
    ]
    """EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
    permissions that compute based off a relation. For example, if a schema has a relation
    `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
    computable permissions for the relation `viewer` will include `view`.
    """

    ExperimentalDependentRelations: grpc.aio.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsResponse,
    ]
    """EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
    relations and permissions that used to compute a permission, recursively. It is the
    inverse of the ComputablePermissions API.
    """

    ExperimentalDiffSchema: grpc.aio.UnaryUnaryMultiCallable[
        authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaRequest,
        authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaResponse,
    ]
    """EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
    specified schema and the schema stored in SpiceDB. This is useful for clients that need to
    introspect the schema of a SpiceDB instance.
    """

class ExperimentalServiceServicer(metaclass=abc.ABCMeta):
    """ExperimentalService exposes a number of APIs that are currently being
    prototyped and tested for future inclusion in the stable API.
    """

    @abc.abstractmethod
    def BulkImportRelationships(
        self,
        request_iterator: _MaybeAsyncIterator[authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsRequest],
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.BulkImportRelationshipsResponse]]:
        """BulkImportRelationships is a faster path to writing a large number of
        relationships at once. It is both batched and streaming. For maximum
        performance, the caller should attempt to write relationships in as close
        to relationship sort order as possible: (resource.object_type,
        resource.object_id, relation, subject.object.object_type,
        subject.object.object_id, subject.optional_relation)

        EXPERIMENTAL
        https://github.com/authzed/spicedb/issues/1303
        """

    @abc.abstractmethod
    def BulkExportRelationships(
        self,
        request: authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse], collections.abc.AsyncIterator[authzed.api.v1.experimental_service_pb2.BulkExportRelationshipsResponse]]:
        """BulkExportRelationships is the fastest path available to exporting
        relationships from the server. It is resumable, and will return results
        in an order determined by the server.
        """

    @abc.abstractmethod
    def BulkCheckPermission(
        self,
        request: authzed.api.v1.experimental_service_pb2.BulkCheckPermissionRequest,
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.BulkCheckPermissionResponse]]:
        """NOTE: BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission" and the
        API will be removed from experimental in a future release.
        """

    @abc.abstractmethod
    def ExperimentalReflectSchema(
        self,
        request: authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.ExperimentalReflectSchemaResponse]]:
        """EXPERIMENTAL: ReflectSchema is an API that allows clients to reflect the schema stored in
        SpiceDB. This is useful for clients that need to introspect the schema of a SpiceDB instance.
        """

    @abc.abstractmethod
    def ExperimentalComputablePermissions(
        self,
        request: authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.ExperimentalComputablePermissionsResponse]]:
        """EXPERIMENTAL: ComputablePermissions is an API that allows clients to request the set of
        permissions that compute based off a relation. For example, if a schema has a relation
        `viewer` and a permission `view` defined as `permission view = viewer + editor`, then the
        computable permissions for the relation `viewer` will include `view`.
        """

    @abc.abstractmethod
    def ExperimentalDependentRelations(
        self,
        request: authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.ExperimentalDependentRelationsResponse]]:
        """EXPERIMENTAL: DependentRelations is an API that allows clients to request the set of
        relations and permissions that used to compute a permission, recursively. It is the
        inverse of the ComputablePermissions API.
        """

    @abc.abstractmethod
    def ExperimentalDiffSchema(
        self,
        request: authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaRequest,
        context: _ServicerContext,
    ) -> typing.Union[authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaResponse, collections.abc.Awaitable[authzed.api.v1.experimental_service_pb2.ExperimentalDiffSchemaResponse]]:
        """EXPERIMENTAL: DiffSchema is an API that allows clients to request the difference between the
        specified schema and the schema stored in SpiceDB. This is useful for clients that need to
        introspect the schema of a SpiceDB instance.
        """

def add_ExperimentalServiceServicer_to_server(servicer: ExperimentalServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
