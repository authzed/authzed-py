"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import authzed.api.v1.core_pb2
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DebugInformation(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CHECK_FIELD_NUMBER: builtins.int
    SCHEMA_USED_FIELD_NUMBER: builtins.int
    schema_used: typing.Text = ...

    @property
    def check(self) -> global___CheckDebugTrace: ...

    def __init__(self,
        *,
        check : typing.Optional[global___CheckDebugTrace] = ...,
        schema_used : typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"check",b"check"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"check",b"check",u"schema_used",b"schema_used"]) -> None: ...
global___DebugInformation = DebugInformation

class CheckDebugTrace(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class PermissionType(metaclass=_PermissionType):
        V = typing.NewType('V', builtins.int)

    PERMISSION_TYPE_UNSPECIFIED = CheckDebugTrace.PermissionType.V(0)
    PERMISSION_TYPE_RELATION = CheckDebugTrace.PermissionType.V(1)
    PERMISSION_TYPE_PERMISSION = CheckDebugTrace.PermissionType.V(2)

    class _PermissionType(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PermissionType.V], builtins.type):  # type: ignore
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PERMISSION_TYPE_UNSPECIFIED = CheckDebugTrace.PermissionType.V(0)
        PERMISSION_TYPE_RELATION = CheckDebugTrace.PermissionType.V(1)
        PERMISSION_TYPE_PERMISSION = CheckDebugTrace.PermissionType.V(2)

    class Permissionship(metaclass=_Permissionship):
        V = typing.NewType('V', builtins.int)

    PERMISSIONSHIP_UNSPECIFIED = CheckDebugTrace.Permissionship.V(0)
    PERMISSIONSHIP_NO_PERMISSION = CheckDebugTrace.Permissionship.V(1)
    PERMISSIONSHIP_HAS_PERMISSION = CheckDebugTrace.Permissionship.V(2)

    class _Permissionship(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Permissionship.V], builtins.type):  # type: ignore
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        PERMISSIONSHIP_UNSPECIFIED = CheckDebugTrace.Permissionship.V(0)
        PERMISSIONSHIP_NO_PERMISSION = CheckDebugTrace.Permissionship.V(1)
        PERMISSIONSHIP_HAS_PERMISSION = CheckDebugTrace.Permissionship.V(2)

    class SubProblems(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TRACES_FIELD_NUMBER: builtins.int

        @property
        def traces(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CheckDebugTrace]: ...

        def __init__(self,
            *,
            traces : typing.Optional[typing.Iterable[global___CheckDebugTrace]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"traces",b"traces"]) -> None: ...

    RESOURCE_FIELD_NUMBER: builtins.int
    PERMISSION_FIELD_NUMBER: builtins.int
    PERMISSION_TYPE_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    WAS_CACHED_RESULT_FIELD_NUMBER: builtins.int
    SUB_PROBLEMS_FIELD_NUMBER: builtins.int
    permission: typing.Text = ...
    permission_type: global___CheckDebugTrace.PermissionType.V = ...
    result: global___CheckDebugTrace.Permissionship.V = ...
    was_cached_result: builtins.bool = ...

    @property
    def resource(self) -> authzed.api.v1.core_pb2.ObjectReference: ...

    @property
    def subject(self) -> authzed.api.v1.core_pb2.SubjectReference: ...

    @property
    def sub_problems(self) -> global___CheckDebugTrace.SubProblems: ...

    def __init__(self,
        *,
        resource : typing.Optional[authzed.api.v1.core_pb2.ObjectReference] = ...,
        permission : typing.Text = ...,
        permission_type : global___CheckDebugTrace.PermissionType.V = ...,
        subject : typing.Optional[authzed.api.v1.core_pb2.SubjectReference] = ...,
        result : global___CheckDebugTrace.Permissionship.V = ...,
        was_cached_result : builtins.bool = ...,
        sub_problems : typing.Optional[global___CheckDebugTrace.SubProblems] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"resolution",b"resolution",u"resource",b"resource",u"sub_problems",b"sub_problems",u"subject",b"subject",u"was_cached_result",b"was_cached_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"permission",b"permission",u"permission_type",b"permission_type",u"resolution",b"resolution",u"resource",b"resource",u"result",b"result",u"sub_problems",b"sub_problems",u"subject",b"subject",u"was_cached_result",b"was_cached_result"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"resolution",b"resolution"]) -> typing.Optional[typing_extensions.Literal["was_cached_result","sub_problems"]]: ...
global___CheckDebugTrace = CheckDebugTrace
