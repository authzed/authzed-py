"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import authzed.api.v1.core_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.duration_pb2
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class DebugInformation(google.protobuf.message.Message):
    """DebugInformation defines debug information returned by an API call in a footer when
    requested with a specific debugging header.

    The specific debug information returned will depend on the type of the API call made.

    See the github.com/authzed/authzed-go project for the specific header and footer names.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHECK_FIELD_NUMBER: builtins.int
    SCHEMA_USED_FIELD_NUMBER: builtins.int
    @property
    def check(self) -> global___CheckDebugTrace:
        """check holds debug information about a check request."""
    schema_used: builtins.str
    """schema_used holds the schema used for the request."""
    def __init__(
        self,
        *,
        check: global___CheckDebugTrace | None = ...,
        schema_used: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["check", b"check"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["check", b"check", "schema_used", b"schema_used"]) -> None: ...

global___DebugInformation = DebugInformation

@typing_extensions.final
class CheckDebugTrace(google.protobuf.message.Message):
    """CheckDebugTrace is a recursive trace of the requests made for resolving a CheckPermission
    API call.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _PermissionType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _PermissionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CheckDebugTrace._PermissionType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        PERMISSION_TYPE_UNSPECIFIED: CheckDebugTrace._PermissionType.ValueType  # 0
        PERMISSION_TYPE_RELATION: CheckDebugTrace._PermissionType.ValueType  # 1
        PERMISSION_TYPE_PERMISSION: CheckDebugTrace._PermissionType.ValueType  # 2

    class PermissionType(_PermissionType, metaclass=_PermissionTypeEnumTypeWrapper): ...
    PERMISSION_TYPE_UNSPECIFIED: CheckDebugTrace.PermissionType.ValueType  # 0
    PERMISSION_TYPE_RELATION: CheckDebugTrace.PermissionType.ValueType  # 1
    PERMISSION_TYPE_PERMISSION: CheckDebugTrace.PermissionType.ValueType  # 2

    class _Permissionship:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _PermissionshipEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CheckDebugTrace._Permissionship.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        PERMISSIONSHIP_UNSPECIFIED: CheckDebugTrace._Permissionship.ValueType  # 0
        PERMISSIONSHIP_NO_PERMISSION: CheckDebugTrace._Permissionship.ValueType  # 1
        PERMISSIONSHIP_HAS_PERMISSION: CheckDebugTrace._Permissionship.ValueType  # 2
        PERMISSIONSHIP_CONDITIONAL_PERMISSION: CheckDebugTrace._Permissionship.ValueType  # 3

    class Permissionship(_Permissionship, metaclass=_PermissionshipEnumTypeWrapper): ...
    PERMISSIONSHIP_UNSPECIFIED: CheckDebugTrace.Permissionship.ValueType  # 0
    PERMISSIONSHIP_NO_PERMISSION: CheckDebugTrace.Permissionship.ValueType  # 1
    PERMISSIONSHIP_HAS_PERMISSION: CheckDebugTrace.Permissionship.ValueType  # 2
    PERMISSIONSHIP_CONDITIONAL_PERMISSION: CheckDebugTrace.Permissionship.ValueType  # 3

    @typing_extensions.final
    class SubProblems(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TRACES_FIELD_NUMBER: builtins.int
        @property
        def traces(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CheckDebugTrace]: ...
        def __init__(
            self,
            *,
            traces: collections.abc.Iterable[global___CheckDebugTrace] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["traces", b"traces"]) -> None: ...

    RESOURCE_FIELD_NUMBER: builtins.int
    PERMISSION_FIELD_NUMBER: builtins.int
    PERMISSION_TYPE_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    CAVEAT_EVALUATION_INFO_FIELD_NUMBER: builtins.int
    DURATION_FIELD_NUMBER: builtins.int
    WAS_CACHED_RESULT_FIELD_NUMBER: builtins.int
    SUB_PROBLEMS_FIELD_NUMBER: builtins.int
    @property
    def resource(self) -> authzed.api.v1.core_pb2.ObjectReference:
        """resource holds the resource on which the Check was performed."""
    permission: builtins.str
    """permission holds the name of the permission or relation on which the Check was performed."""
    permission_type: global___CheckDebugTrace.PermissionType.ValueType
    """permission_type holds information indicating whether it was a permission or relation."""
    @property
    def subject(self) -> authzed.api.v1.core_pb2.SubjectReference:
        """subject holds the subject on which the Check was performed. This will be static across all calls within
        the same Check tree.
        """
    result: global___CheckDebugTrace.Permissionship.ValueType
    """result holds the result of the Check call."""
    @property
    def caveat_evaluation_info(self) -> global___CaveatEvalInfo:
        """caveat_evaluation_info holds information about the caveat evaluated for this step of the trace."""
    @property
    def duration(self) -> google.protobuf.duration_pb2.Duration:
        """duration holds the time spent executing this Check operation."""
    was_cached_result: builtins.bool
    """was_cached_result, if true, indicates that the result was found in the cache and returned directly."""
    @property
    def sub_problems(self) -> global___CheckDebugTrace.SubProblems:
        """sub_problems holds the sub problems that were executed to resolve the answer to this Check. An empty list
        and a permissionship of PERMISSIONSHIP_HAS_PERMISSION indicates the subject was found within this relation.
        """
    def __init__(
        self,
        *,
        resource: authzed.api.v1.core_pb2.ObjectReference | None = ...,
        permission: builtins.str = ...,
        permission_type: global___CheckDebugTrace.PermissionType.ValueType = ...,
        subject: authzed.api.v1.core_pb2.SubjectReference | None = ...,
        result: global___CheckDebugTrace.Permissionship.ValueType = ...,
        caveat_evaluation_info: global___CaveatEvalInfo | None = ...,
        duration: google.protobuf.duration_pb2.Duration | None = ...,
        was_cached_result: builtins.bool = ...,
        sub_problems: global___CheckDebugTrace.SubProblems | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["caveat_evaluation_info", b"caveat_evaluation_info", "duration", b"duration", "resolution", b"resolution", "resource", b"resource", "sub_problems", b"sub_problems", "subject", b"subject", "was_cached_result", b"was_cached_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["caveat_evaluation_info", b"caveat_evaluation_info", "duration", b"duration", "permission", b"permission", "permission_type", b"permission_type", "resolution", b"resolution", "resource", b"resource", "result", b"result", "sub_problems", b"sub_problems", "subject", b"subject", "was_cached_result", b"was_cached_result"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["resolution", b"resolution"]) -> typing_extensions.Literal["was_cached_result", "sub_problems"] | None: ...

global___CheckDebugTrace = CheckDebugTrace

@typing_extensions.final
class CaveatEvalInfo(google.protobuf.message.Message):
    """CaveatEvalInfo holds information about a caveat expression that was evaluated."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Result:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ResultEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[CaveatEvalInfo._Result.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        RESULT_UNSPECIFIED: CaveatEvalInfo._Result.ValueType  # 0
        RESULT_UNEVALUATED: CaveatEvalInfo._Result.ValueType  # 1
        RESULT_FALSE: CaveatEvalInfo._Result.ValueType  # 2
        RESULT_TRUE: CaveatEvalInfo._Result.ValueType  # 3
        RESULT_MISSING_SOME_CONTEXT: CaveatEvalInfo._Result.ValueType  # 4

    class Result(_Result, metaclass=_ResultEnumTypeWrapper): ...
    RESULT_UNSPECIFIED: CaveatEvalInfo.Result.ValueType  # 0
    RESULT_UNEVALUATED: CaveatEvalInfo.Result.ValueType  # 1
    RESULT_FALSE: CaveatEvalInfo.Result.ValueType  # 2
    RESULT_TRUE: CaveatEvalInfo.Result.ValueType  # 3
    RESULT_MISSING_SOME_CONTEXT: CaveatEvalInfo.Result.ValueType  # 4

    EXPRESSION_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    PARTIAL_CAVEAT_INFO_FIELD_NUMBER: builtins.int
    CAVEAT_NAME_FIELD_NUMBER: builtins.int
    expression: builtins.str
    """expression is the expression that was evaluated."""
    result: global___CaveatEvalInfo.Result.ValueType
    """result is the result of the evaluation."""
    @property
    def context(self) -> google.protobuf.struct_pb2.Struct:
        """context consists of any named values that were used for evaluating the caveat expression."""
    @property
    def partial_caveat_info(self) -> authzed.api.v1.core_pb2.PartialCaveatInfo:
        """partial_caveat_info holds information of a partially-evaluated caveated response, if applicable."""
    caveat_name: builtins.str
    """caveat_name is the name of the caveat that was executed, if applicable."""
    def __init__(
        self,
        *,
        expression: builtins.str = ...,
        result: global___CaveatEvalInfo.Result.ValueType = ...,
        context: google.protobuf.struct_pb2.Struct | None = ...,
        partial_caveat_info: authzed.api.v1.core_pb2.PartialCaveatInfo | None = ...,
        caveat_name: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context", b"context", "partial_caveat_info", b"partial_caveat_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["caveat_name", b"caveat_name", "context", b"context", "expression", b"expression", "partial_caveat_info", b"partial_caveat_info", "result", b"result"]) -> None: ...

global___CaveatEvalInfo = CaveatEvalInfo
