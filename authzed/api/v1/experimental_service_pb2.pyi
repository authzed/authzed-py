"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import authzed.api.v1.core_pb2
import authzed.api.v1.permission_service_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.struct_pb2
import google.rpc.status_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class BulkCheckPermissionRequest(google.protobuf.message.Message):
    """NOTE: Deprecated now that BulkCheckPermission has been promoted to the stable API as "CheckBulkPermission"."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BulkCheckPermissionRequestItem]: ...
    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        items: collections.abc.Iterable[global___BulkCheckPermissionRequestItem] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consistency", b"consistency", "items", b"items"]) -> None: ...

global___BulkCheckPermissionRequest = BulkCheckPermissionRequest

@typing.final
class BulkCheckPermissionRequestItem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RESOURCE_FIELD_NUMBER: builtins.int
    PERMISSION_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    permission: builtins.str
    @property
    def resource(self) -> authzed.api.v1.core_pb2.ObjectReference: ...
    @property
    def subject(self) -> authzed.api.v1.core_pb2.SubjectReference: ...
    @property
    def context(self) -> google.protobuf.struct_pb2.Struct: ...
    def __init__(
        self,
        *,
        resource: authzed.api.v1.core_pb2.ObjectReference | None = ...,
        permission: builtins.str = ...,
        subject: authzed.api.v1.core_pb2.SubjectReference | None = ...,
        context: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["context", b"context", "resource", b"resource", "subject", b"subject"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["context", b"context", "permission", b"permission", "resource", b"resource", "subject", b"subject"]) -> None: ...

global___BulkCheckPermissionRequestItem = BulkCheckPermissionRequestItem

@typing.final
class BulkCheckPermissionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHECKED_AT_FIELD_NUMBER: builtins.int
    PAIRS_FIELD_NUMBER: builtins.int
    @property
    def checked_at(self) -> authzed.api.v1.core_pb2.ZedToken: ...
    @property
    def pairs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___BulkCheckPermissionPair]: ...
    def __init__(
        self,
        *,
        checked_at: authzed.api.v1.core_pb2.ZedToken | None = ...,
        pairs: collections.abc.Iterable[global___BulkCheckPermissionPair] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["checked_at", b"checked_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["checked_at", b"checked_at", "pairs", b"pairs"]) -> None: ...

global___BulkCheckPermissionResponse = BulkCheckPermissionResponse

@typing.final
class BulkCheckPermissionPair(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUEST_FIELD_NUMBER: builtins.int
    ITEM_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    @property
    def request(self) -> global___BulkCheckPermissionRequestItem: ...
    @property
    def item(self) -> global___BulkCheckPermissionResponseItem: ...
    @property
    def error(self) -> google.rpc.status_pb2.Status: ...
    def __init__(
        self,
        *,
        request: global___BulkCheckPermissionRequestItem | None = ...,
        item: global___BulkCheckPermissionResponseItem | None = ...,
        error: google.rpc.status_pb2.Status | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["error", b"error", "item", b"item", "request", b"request", "response", b"response"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["error", b"error", "item", b"item", "request", b"request", "response", b"response"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["response", b"response"]) -> typing.Literal["item", "error"] | None: ...

global___BulkCheckPermissionPair = BulkCheckPermissionPair

@typing.final
class BulkCheckPermissionResponseItem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERMISSIONSHIP_FIELD_NUMBER: builtins.int
    PARTIAL_CAVEAT_INFO_FIELD_NUMBER: builtins.int
    permissionship: authzed.api.v1.permission_service_pb2.CheckPermissionResponse.Permissionship.ValueType
    @property
    def partial_caveat_info(self) -> authzed.api.v1.core_pb2.PartialCaveatInfo: ...
    def __init__(
        self,
        *,
        permissionship: authzed.api.v1.permission_service_pb2.CheckPermissionResponse.Permissionship.ValueType = ...,
        partial_caveat_info: authzed.api.v1.core_pb2.PartialCaveatInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["partial_caveat_info", b"partial_caveat_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["partial_caveat_info", b"partial_caveat_info", "permissionship", b"permissionship"]) -> None: ...

global___BulkCheckPermissionResponseItem = BulkCheckPermissionResponseItem

@typing.final
class BulkImportRelationshipsRequest(google.protobuf.message.Message):
    """BulkImportRelationshipsRequest represents one batch of the streaming
    BulkImportRelationships API. The maximum size is only limited by the backing
    datastore, and optimal size should be determined by the calling client
    experimentally.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATIONSHIPS_FIELD_NUMBER: builtins.int
    @property
    def relationships(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[authzed.api.v1.core_pb2.Relationship]: ...
    def __init__(
        self,
        *,
        relationships: collections.abc.Iterable[authzed.api.v1.core_pb2.Relationship] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["relationships", b"relationships"]) -> None: ...

global___BulkImportRelationshipsRequest = BulkImportRelationshipsRequest

@typing.final
class BulkImportRelationshipsResponse(google.protobuf.message.Message):
    """BulkImportRelationshipsResponse is returned on successful completion of the
    bulk load stream, and contains the total number of relationships loaded.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUM_LOADED_FIELD_NUMBER: builtins.int
    num_loaded: builtins.int
    def __init__(
        self,
        *,
        num_loaded: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["num_loaded", b"num_loaded"]) -> None: ...

global___BulkImportRelationshipsResponse = BulkImportRelationshipsResponse

@typing.final
class BulkExportRelationshipsRequest(google.protobuf.message.Message):
    """BulkExportRelationshipsRequest represents a resumable request for
    all relationships from the server.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    OPTIONAL_LIMIT_FIELD_NUMBER: builtins.int
    OPTIONAL_CURSOR_FIELD_NUMBER: builtins.int
    OPTIONAL_RELATIONSHIP_FILTER_FIELD_NUMBER: builtins.int
    optional_limit: builtins.int
    """optional_limit, if non-zero, specifies the limit on the number of
    relationships the server can return in one page. By default, the server
    will pick a page size, and the server is free to choose a smaller size
    at will.
    """
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    @property
    def optional_cursor(self) -> authzed.api.v1.core_pb2.Cursor:
        """optional_cursor, if specified, indicates the cursor after which results
        should resume being returned. The cursor can be found on the
        BulkExportRelationshipsResponse object.
        """

    @property
    def optional_relationship_filter(self) -> authzed.api.v1.permission_service_pb2.RelationshipFilter:
        """optional_relationship_filter, if specified, indicates the
        filter to apply to each relationship to be exported.
        """

    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        optional_limit: builtins.int = ...,
        optional_cursor: authzed.api.v1.core_pb2.Cursor | None = ...,
        optional_relationship_filter: authzed.api.v1.permission_service_pb2.RelationshipFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency", "optional_cursor", b"optional_cursor", "optional_relationship_filter", b"optional_relationship_filter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consistency", b"consistency", "optional_cursor", b"optional_cursor", "optional_limit", b"optional_limit", "optional_relationship_filter", b"optional_relationship_filter"]) -> None: ...

global___BulkExportRelationshipsRequest = BulkExportRelationshipsRequest

@typing.final
class BulkExportRelationshipsResponse(google.protobuf.message.Message):
    """BulkExportRelationshipsResponse is one page in a stream of relationship
    groups that meet the criteria specified by the originating request. The
    server will continue to stream back relationship groups as quickly as it can
    until all relationships have been transmitted back.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AFTER_RESULT_CURSOR_FIELD_NUMBER: builtins.int
    RELATIONSHIPS_FIELD_NUMBER: builtins.int
    @property
    def after_result_cursor(self) -> authzed.api.v1.core_pb2.Cursor: ...
    @property
    def relationships(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[authzed.api.v1.core_pb2.Relationship]: ...
    def __init__(
        self,
        *,
        after_result_cursor: authzed.api.v1.core_pb2.Cursor | None = ...,
        relationships: collections.abc.Iterable[authzed.api.v1.core_pb2.Relationship] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["after_result_cursor", b"after_result_cursor"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["after_result_cursor", b"after_result_cursor", "relationships", b"relationships"]) -> None: ...

global___BulkExportRelationshipsResponse = BulkExportRelationshipsResponse

@typing.final
class ExperimentalReflectSchemaRequest(google.protobuf.message.Message):
    """Reflection types ////////////////////////////////////////////"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    OPTIONAL_FILTERS_FIELD_NUMBER: builtins.int
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    @property
    def optional_filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpSchemaFilter]:
        """optional_filters defines optional filters that are applied in
        an OR fashion to the schema, before being returned
        """

    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        optional_filters: collections.abc.Iterable[global___ExpSchemaFilter] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consistency", b"consistency", "optional_filters", b"optional_filters"]) -> None: ...

global___ExperimentalReflectSchemaRequest = ExperimentalReflectSchemaRequest

@typing.final
class ExperimentalReflectSchemaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEFINITIONS_FIELD_NUMBER: builtins.int
    CAVEATS_FIELD_NUMBER: builtins.int
    READ_AT_FIELD_NUMBER: builtins.int
    @property
    def definitions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpDefinition]:
        """definitions are the definitions defined in the schema."""

    @property
    def caveats(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpCaveat]:
        """caveats are the caveats defined in the schema."""

    @property
    def read_at(self) -> authzed.api.v1.core_pb2.ZedToken:
        """read_at is the ZedToken at which the schema was read."""

    def __init__(
        self,
        *,
        definitions: collections.abc.Iterable[global___ExpDefinition] | None = ...,
        caveats: collections.abc.Iterable[global___ExpCaveat] | None = ...,
        read_at: authzed.api.v1.core_pb2.ZedToken | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["read_at", b"read_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["caveats", b"caveats", "definitions", b"definitions", "read_at", b"read_at"]) -> None: ...

global___ExperimentalReflectSchemaResponse = ExperimentalReflectSchemaResponse

@typing.final
class ExpSchemaFilter(google.protobuf.message.Message):
    """ExpSchemaFilter is a filter that can be applied to the schema on reflection."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPTIONAL_DEFINITION_NAME_FILTER_FIELD_NUMBER: builtins.int
    OPTIONAL_CAVEAT_NAME_FILTER_FIELD_NUMBER: builtins.int
    OPTIONAL_RELATION_NAME_FILTER_FIELD_NUMBER: builtins.int
    OPTIONAL_PERMISSION_NAME_FILTER_FIELD_NUMBER: builtins.int
    optional_definition_name_filter: builtins.str
    """optional_definition_name_filter is a prefix that is matched against the definition name."""
    optional_caveat_name_filter: builtins.str
    """optional_caveat_name_filter is a prefix that is matched against the caveat name."""
    optional_relation_name_filter: builtins.str
    """optional_relation_name_filter is a prefix that is matched against the relation name."""
    optional_permission_name_filter: builtins.str
    """optional_permission_name_filter is a prefix that is matched against the permission name."""
    def __init__(
        self,
        *,
        optional_definition_name_filter: builtins.str = ...,
        optional_caveat_name_filter: builtins.str = ...,
        optional_relation_name_filter: builtins.str = ...,
        optional_permission_name_filter: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["optional_caveat_name_filter", b"optional_caveat_name_filter", "optional_definition_name_filter", b"optional_definition_name_filter", "optional_permission_name_filter", b"optional_permission_name_filter", "optional_relation_name_filter", b"optional_relation_name_filter"]) -> None: ...

global___ExpSchemaFilter = ExpSchemaFilter

@typing.final
class ExpDefinition(google.protobuf.message.Message):
    """ExpDefinition is the representation of a definition in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    RELATIONS_FIELD_NUMBER: builtins.int
    PERMISSIONS_FIELD_NUMBER: builtins.int
    name: builtins.str
    comment: builtins.str
    """comment is a human-readable comments on the definition. Will include
    delimiter characters.
    """
    @property
    def relations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpRelation]: ...
    @property
    def permissions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpPermission]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        comment: builtins.str = ...,
        relations: collections.abc.Iterable[global___ExpRelation] | None = ...,
        permissions: collections.abc.Iterable[global___ExpPermission] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "name", b"name", "permissions", b"permissions", "relations", b"relations"]) -> None: ...

global___ExpDefinition = ExpDefinition

@typing.final
class ExpCaveat(google.protobuf.message.Message):
    """ExpCaveat is the representation of a caveat in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    EXPRESSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    comment: builtins.str
    """comment is a human-readable comments on the caveat. Will include
    delimiter characters.
    """
    expression: builtins.str
    @property
    def parameters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpCaveatParameter]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        comment: builtins.str = ...,
        parameters: collections.abc.Iterable[global___ExpCaveatParameter] | None = ...,
        expression: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "expression", b"expression", "name", b"name", "parameters", b"parameters"]) -> None: ...

global___ExpCaveat = ExpCaveat

@typing.final
class ExpCaveatParameter(google.protobuf.message.Message):
    """ExpCaveatParameter is the representation of a parameter in a caveat."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    PARENT_CAVEAT_NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    type: builtins.str
    """type is the type of the parameter. Will be a string representing the
    type, e.g. `int` or `list<string>`
    """
    parent_caveat_name: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        type: builtins.str = ...,
        parent_caveat_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "parent_caveat_name", b"parent_caveat_name", "type", b"type"]) -> None: ...

global___ExpCaveatParameter = ExpCaveatParameter

@typing.final
class ExpRelation(google.protobuf.message.Message):
    """ExpRelation is the representation of a relation in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    PARENT_DEFINITION_NAME_FIELD_NUMBER: builtins.int
    SUBJECT_TYPES_FIELD_NUMBER: builtins.int
    name: builtins.str
    comment: builtins.str
    parent_definition_name: builtins.str
    @property
    def subject_types(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpTypeReference]: ...
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        comment: builtins.str = ...,
        parent_definition_name: builtins.str = ...,
        subject_types: collections.abc.Iterable[global___ExpTypeReference] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "name", b"name", "parent_definition_name", b"parent_definition_name", "subject_types", b"subject_types"]) -> None: ...

global___ExpRelation = ExpRelation

@typing.final
class ExpTypeReference(google.protobuf.message.Message):
    """ExpTypeReference is the representation of a type reference in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUBJECT_DEFINITION_NAME_FIELD_NUMBER: builtins.int
    OPTIONAL_CAVEAT_NAME_FIELD_NUMBER: builtins.int
    IS_TERMINAL_SUBJECT_FIELD_NUMBER: builtins.int
    OPTIONAL_RELATION_NAME_FIELD_NUMBER: builtins.int
    IS_PUBLIC_WILDCARD_FIELD_NUMBER: builtins.int
    subject_definition_name: builtins.str
    """subject_definition_name is the name of the subject's definition."""
    optional_caveat_name: builtins.str
    """optional_caveat_name is the name of the caveat that is applied to the subject, if any."""
    is_terminal_subject: builtins.bool
    """is_terminal_subject is true if the subject is terminal, meaning it is referenced directly vs a sub-relation."""
    optional_relation_name: builtins.str
    """optional_relation_name is the name of the relation that is applied to the subject, if any."""
    is_public_wildcard: builtins.bool
    """is_public_wildcard is true if the subject is a public wildcard."""
    def __init__(
        self,
        *,
        subject_definition_name: builtins.str = ...,
        optional_caveat_name: builtins.str = ...,
        is_terminal_subject: builtins.bool = ...,
        optional_relation_name: builtins.str = ...,
        is_public_wildcard: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["is_public_wildcard", b"is_public_wildcard", "is_terminal_subject", b"is_terminal_subject", "optional_relation_name", b"optional_relation_name", "typeref", b"typeref"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["is_public_wildcard", b"is_public_wildcard", "is_terminal_subject", b"is_terminal_subject", "optional_caveat_name", b"optional_caveat_name", "optional_relation_name", b"optional_relation_name", "subject_definition_name", b"subject_definition_name", "typeref", b"typeref"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["typeref", b"typeref"]) -> typing.Literal["is_terminal_subject", "optional_relation_name", "is_public_wildcard"] | None: ...

global___ExpTypeReference = ExpTypeReference

@typing.final
class ExpPermission(google.protobuf.message.Message):
    """ExpPermission is the representation of a permission in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    COMMENT_FIELD_NUMBER: builtins.int
    PARENT_DEFINITION_NAME_FIELD_NUMBER: builtins.int
    name: builtins.str
    comment: builtins.str
    """comment is a human-readable comments on the permission. Will include
    delimiter characters.
    """
    parent_definition_name: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        comment: builtins.str = ...,
        parent_definition_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["comment", b"comment", "name", b"name", "parent_definition_name", b"parent_definition_name"]) -> None: ...

global___ExpPermission = ExpPermission

@typing.final
class ExperimentalComputablePermissionsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    DEFINITION_NAME_FIELD_NUMBER: builtins.int
    RELATION_NAME_FIELD_NUMBER: builtins.int
    OPTIONAL_DEFINITION_NAME_FILTER_FIELD_NUMBER: builtins.int
    definition_name: builtins.str
    relation_name: builtins.str
    optional_definition_name_filter: builtins.str
    """optional_definition_name_match is a prefix that is matched against the definition name(s)
    for the permissions returned.
    If not specified, will be ignored.
    """
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        definition_name: builtins.str = ...,
        relation_name: builtins.str = ...,
        optional_definition_name_filter: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consistency", b"consistency", "definition_name", b"definition_name", "optional_definition_name_filter", b"optional_definition_name_filter", "relation_name", b"relation_name"]) -> None: ...

global___ExperimentalComputablePermissionsRequest = ExperimentalComputablePermissionsRequest

@typing.final
class ExpRelationReference(google.protobuf.message.Message):
    """ExpRelationReference is a reference to a relation or permission in the schema."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEFINITION_NAME_FIELD_NUMBER: builtins.int
    RELATION_NAME_FIELD_NUMBER: builtins.int
    IS_PERMISSION_FIELD_NUMBER: builtins.int
    definition_name: builtins.str
    relation_name: builtins.str
    is_permission: builtins.bool
    def __init__(
        self,
        *,
        definition_name: builtins.str = ...,
        relation_name: builtins.str = ...,
        is_permission: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["definition_name", b"definition_name", "is_permission", b"is_permission", "relation_name", b"relation_name"]) -> None: ...

global___ExpRelationReference = ExpRelationReference

@typing.final
class ExperimentalComputablePermissionsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PERMISSIONS_FIELD_NUMBER: builtins.int
    READ_AT_FIELD_NUMBER: builtins.int
    @property
    def permissions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpRelationReference]: ...
    @property
    def read_at(self) -> authzed.api.v1.core_pb2.ZedToken:
        """read_at is the ZedToken at which the schema was read."""

    def __init__(
        self,
        *,
        permissions: collections.abc.Iterable[global___ExpRelationReference] | None = ...,
        read_at: authzed.api.v1.core_pb2.ZedToken | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["read_at", b"read_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["permissions", b"permissions", "read_at", b"read_at"]) -> None: ...

global___ExperimentalComputablePermissionsResponse = ExperimentalComputablePermissionsResponse

@typing.final
class ExperimentalDependentRelationsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    DEFINITION_NAME_FIELD_NUMBER: builtins.int
    PERMISSION_NAME_FIELD_NUMBER: builtins.int
    definition_name: builtins.str
    permission_name: builtins.str
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        definition_name: builtins.str = ...,
        permission_name: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["consistency", b"consistency", "definition_name", b"definition_name", "permission_name", b"permission_name"]) -> None: ...

global___ExperimentalDependentRelationsRequest = ExperimentalDependentRelationsRequest

@typing.final
class ExperimentalDependentRelationsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATIONS_FIELD_NUMBER: builtins.int
    READ_AT_FIELD_NUMBER: builtins.int
    @property
    def relations(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpRelationReference]: ...
    @property
    def read_at(self) -> authzed.api.v1.core_pb2.ZedToken:
        """read_at is the ZedToken at which the schema was read."""

    def __init__(
        self,
        *,
        relations: collections.abc.Iterable[global___ExpRelationReference] | None = ...,
        read_at: authzed.api.v1.core_pb2.ZedToken | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["read_at", b"read_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["read_at", b"read_at", "relations", b"relations"]) -> None: ...

global___ExperimentalDependentRelationsResponse = ExperimentalDependentRelationsResponse

@typing.final
class ExperimentalDiffSchemaRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONSISTENCY_FIELD_NUMBER: builtins.int
    COMPARISON_SCHEMA_FIELD_NUMBER: builtins.int
    comparison_schema: builtins.str
    @property
    def consistency(self) -> authzed.api.v1.permission_service_pb2.Consistency: ...
    def __init__(
        self,
        *,
        consistency: authzed.api.v1.permission_service_pb2.Consistency | None = ...,
        comparison_schema: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["consistency", b"consistency"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["comparison_schema", b"comparison_schema", "consistency", b"consistency"]) -> None: ...

global___ExperimentalDiffSchemaRequest = ExperimentalDiffSchemaRequest

@typing.final
class ExperimentalDiffSchemaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DIFFS_FIELD_NUMBER: builtins.int
    READ_AT_FIELD_NUMBER: builtins.int
    @property
    def diffs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ExpSchemaDiff]: ...
    @property
    def read_at(self) -> authzed.api.v1.core_pb2.ZedToken:
        """read_at is the ZedToken at which the schema was read."""

    def __init__(
        self,
        *,
        diffs: collections.abc.Iterable[global___ExpSchemaDiff] | None = ...,
        read_at: authzed.api.v1.core_pb2.ZedToken | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["read_at", b"read_at"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["diffs", b"diffs", "read_at", b"read_at"]) -> None: ...

global___ExperimentalDiffSchemaResponse = ExperimentalDiffSchemaResponse

@typing.final
class ExpRelationSubjectTypeChange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RELATION_FIELD_NUMBER: builtins.int
    CHANGED_SUBJECT_TYPE_FIELD_NUMBER: builtins.int
    @property
    def relation(self) -> global___ExpRelation: ...
    @property
    def changed_subject_type(self) -> global___ExpTypeReference: ...
    def __init__(
        self,
        *,
        relation: global___ExpRelation | None = ...,
        changed_subject_type: global___ExpTypeReference | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["changed_subject_type", b"changed_subject_type", "relation", b"relation"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["changed_subject_type", b"changed_subject_type", "relation", b"relation"]) -> None: ...

global___ExpRelationSubjectTypeChange = ExpRelationSubjectTypeChange

@typing.final
class ExpCaveatParameterTypeChange(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PARAMETER_FIELD_NUMBER: builtins.int
    PREVIOUS_TYPE_FIELD_NUMBER: builtins.int
    previous_type: builtins.str
    @property
    def parameter(self) -> global___ExpCaveatParameter: ...
    def __init__(
        self,
        *,
        parameter: global___ExpCaveatParameter | None = ...,
        previous_type: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["parameter", b"parameter"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["parameter", b"parameter", "previous_type", b"previous_type"]) -> None: ...

global___ExpCaveatParameterTypeChange = ExpCaveatParameterTypeChange

@typing.final
class ExpSchemaDiff(google.protobuf.message.Message):
    """ExpSchemaDiff is the representation of a diff between two schemas."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEFINITION_ADDED_FIELD_NUMBER: builtins.int
    DEFINITION_REMOVED_FIELD_NUMBER: builtins.int
    DEFINITION_DOC_COMMENT_CHANGED_FIELD_NUMBER: builtins.int
    RELATION_ADDED_FIELD_NUMBER: builtins.int
    RELATION_REMOVED_FIELD_NUMBER: builtins.int
    RELATION_DOC_COMMENT_CHANGED_FIELD_NUMBER: builtins.int
    RELATION_SUBJECT_TYPE_ADDED_FIELD_NUMBER: builtins.int
    RELATION_SUBJECT_TYPE_REMOVED_FIELD_NUMBER: builtins.int
    PERMISSION_ADDED_FIELD_NUMBER: builtins.int
    PERMISSION_REMOVED_FIELD_NUMBER: builtins.int
    PERMISSION_DOC_COMMENT_CHANGED_FIELD_NUMBER: builtins.int
    PERMISSION_EXPR_CHANGED_FIELD_NUMBER: builtins.int
    CAVEAT_ADDED_FIELD_NUMBER: builtins.int
    CAVEAT_REMOVED_FIELD_NUMBER: builtins.int
    CAVEAT_DOC_COMMENT_CHANGED_FIELD_NUMBER: builtins.int
    CAVEAT_EXPR_CHANGED_FIELD_NUMBER: builtins.int
    CAVEAT_PARAMETER_ADDED_FIELD_NUMBER: builtins.int
    CAVEAT_PARAMETER_REMOVED_FIELD_NUMBER: builtins.int
    CAVEAT_PARAMETER_TYPE_CHANGED_FIELD_NUMBER: builtins.int
    @property
    def definition_added(self) -> global___ExpDefinition: ...
    @property
    def definition_removed(self) -> global___ExpDefinition: ...
    @property
    def definition_doc_comment_changed(self) -> global___ExpDefinition: ...
    @property
    def relation_added(self) -> global___ExpRelation: ...
    @property
    def relation_removed(self) -> global___ExpRelation: ...
    @property
    def relation_doc_comment_changed(self) -> global___ExpRelation: ...
    @property
    def relation_subject_type_added(self) -> global___ExpRelationSubjectTypeChange: ...
    @property
    def relation_subject_type_removed(self) -> global___ExpRelationSubjectTypeChange: ...
    @property
    def permission_added(self) -> global___ExpPermission: ...
    @property
    def permission_removed(self) -> global___ExpPermission: ...
    @property
    def permission_doc_comment_changed(self) -> global___ExpPermission: ...
    @property
    def permission_expr_changed(self) -> global___ExpPermission: ...
    @property
    def caveat_added(self) -> global___ExpCaveat: ...
    @property
    def caveat_removed(self) -> global___ExpCaveat: ...
    @property
    def caveat_doc_comment_changed(self) -> global___ExpCaveat: ...
    @property
    def caveat_expr_changed(self) -> global___ExpCaveat: ...
    @property
    def caveat_parameter_added(self) -> global___ExpCaveatParameter: ...
    @property
    def caveat_parameter_removed(self) -> global___ExpCaveatParameter: ...
    @property
    def caveat_parameter_type_changed(self) -> global___ExpCaveatParameterTypeChange: ...
    def __init__(
        self,
        *,
        definition_added: global___ExpDefinition | None = ...,
        definition_removed: global___ExpDefinition | None = ...,
        definition_doc_comment_changed: global___ExpDefinition | None = ...,
        relation_added: global___ExpRelation | None = ...,
        relation_removed: global___ExpRelation | None = ...,
        relation_doc_comment_changed: global___ExpRelation | None = ...,
        relation_subject_type_added: global___ExpRelationSubjectTypeChange | None = ...,
        relation_subject_type_removed: global___ExpRelationSubjectTypeChange | None = ...,
        permission_added: global___ExpPermission | None = ...,
        permission_removed: global___ExpPermission | None = ...,
        permission_doc_comment_changed: global___ExpPermission | None = ...,
        permission_expr_changed: global___ExpPermission | None = ...,
        caveat_added: global___ExpCaveat | None = ...,
        caveat_removed: global___ExpCaveat | None = ...,
        caveat_doc_comment_changed: global___ExpCaveat | None = ...,
        caveat_expr_changed: global___ExpCaveat | None = ...,
        caveat_parameter_added: global___ExpCaveatParameter | None = ...,
        caveat_parameter_removed: global___ExpCaveatParameter | None = ...,
        caveat_parameter_type_changed: global___ExpCaveatParameterTypeChange | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["caveat_added", b"caveat_added", "caveat_doc_comment_changed", b"caveat_doc_comment_changed", "caveat_expr_changed", b"caveat_expr_changed", "caveat_parameter_added", b"caveat_parameter_added", "caveat_parameter_removed", b"caveat_parameter_removed", "caveat_parameter_type_changed", b"caveat_parameter_type_changed", "caveat_removed", b"caveat_removed", "definition_added", b"definition_added", "definition_doc_comment_changed", b"definition_doc_comment_changed", "definition_removed", b"definition_removed", "diff", b"diff", "permission_added", b"permission_added", "permission_doc_comment_changed", b"permission_doc_comment_changed", "permission_expr_changed", b"permission_expr_changed", "permission_removed", b"permission_removed", "relation_added", b"relation_added", "relation_doc_comment_changed", b"relation_doc_comment_changed", "relation_removed", b"relation_removed", "relation_subject_type_added", b"relation_subject_type_added", "relation_subject_type_removed", b"relation_subject_type_removed"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["caveat_added", b"caveat_added", "caveat_doc_comment_changed", b"caveat_doc_comment_changed", "caveat_expr_changed", b"caveat_expr_changed", "caveat_parameter_added", b"caveat_parameter_added", "caveat_parameter_removed", b"caveat_parameter_removed", "caveat_parameter_type_changed", b"caveat_parameter_type_changed", "caveat_removed", b"caveat_removed", "definition_added", b"definition_added", "definition_doc_comment_changed", b"definition_doc_comment_changed", "definition_removed", b"definition_removed", "diff", b"diff", "permission_added", b"permission_added", "permission_doc_comment_changed", b"permission_doc_comment_changed", "permission_expr_changed", b"permission_expr_changed", "permission_removed", b"permission_removed", "relation_added", b"relation_added", "relation_doc_comment_changed", b"relation_doc_comment_changed", "relation_removed", b"relation_removed", "relation_subject_type_added", b"relation_subject_type_added", "relation_subject_type_removed", b"relation_subject_type_removed"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["diff", b"diff"]) -> typing.Literal["definition_added", "definition_removed", "definition_doc_comment_changed", "relation_added", "relation_removed", "relation_doc_comment_changed", "relation_subject_type_added", "relation_subject_type_removed", "permission_added", "permission_removed", "permission_doc_comment_changed", "permission_expr_changed", "caveat_added", "caveat_removed", "caveat_doc_comment_changed", "caveat_expr_changed", "caveat_parameter_added", "caveat_parameter_removed", "caveat_parameter_type_changed"] | None: ...

global___ExpSchemaDiff = ExpSchemaDiff
